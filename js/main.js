/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ (function() {

eval("\r\nconst appWheel = () => {\r\n    let wheelSegments = [];\r\n    let wheelResults = [];\r\n    let IS_AMOUNT = true;\r\n    const wheelCheckboxAmount = document.querySelector(\"#wheelCheckBox\");\r\n    const colors = [\r\n        \"#F7A326\",\r\n        \"#f6c42d\",\r\n        \"#F8E754\",\r\n        \"#CEDB53\",\r\n        \"#97C662\",\r\n        \"#63B567\",\r\n        \"#25A195\",\r\n        \"#23BFD3\",\r\n        \"#25AFEE\",\r\n        \"#42A2EE\",\r\n        \"#5A69BB\",\r\n        \"#7953BC\",\r\n        \"#A645B7\",\r\n        \"#E53D76\",\r\n        \"#EE5D52\",\r\n        \"#F86E43\",\r\n    ];\r\n    const curColors = [...colors];\r\n    let wheelSegmentItems;\r\n    let wheel = document.querySelector('.wheel');\r\n    let trigger = document.querySelector('.wheel__play');\r\n    const wheelList = document.querySelector('.wheel__list');\r\n    const plug = [\r\n        {\r\n            id: uniqueId(),\r\n            text: \"1\",\r\n            hide: false,\r\n            amount: 1,\r\n            copy: false\r\n        },\r\n        {\r\n            id: uniqueId(),\r\n            text: \"2\",\r\n            hide: false,\r\n            amount: 1,\r\n            copy: false\r\n        },\r\n        {\r\n            id: uniqueId(),\r\n            text: \"3\",\r\n            hide: false,\r\n            amount: 1,\r\n            copy: false\r\n        },\r\n        {\r\n            id: uniqueId(),\r\n            text: \"4\",\r\n            hide: false,\r\n            amount: 1,\r\n            copy: false\r\n        },\r\n        {\r\n            id: uniqueId(),\r\n            text: \"5\",\r\n            hide: false,\r\n            amount: 1,\r\n            copy: false\r\n        },\r\n        {\r\n            id: uniqueId(),\r\n            text: \"6\",\r\n            hide: false,\r\n            amount: 1,\r\n            copy: false\r\n        },\r\n        {\r\n            id: uniqueId(),\r\n            text: \"7\",\r\n            hide: false,\r\n            amount: 1,\r\n            copy: false\r\n        },\r\n        {\r\n            id: uniqueId(),\r\n            text: \"8\",\r\n            hide: false,\r\n            amount: 1,\r\n            copy: false\r\n        },\r\n        {\r\n            id: uniqueId(),\r\n            text: \"9\",\r\n            hide: false,\r\n            amount: 1,\r\n            copy: false\r\n        },\r\n        {\r\n            id: uniqueId(),\r\n            text: \"10\",\r\n            hide: false,\r\n            amount: 1,\r\n            copy: false\r\n        },\r\n    ];\r\n    let notHide = [];\r\n    let segmentNotHide = wheelSegments.filter(segment => !segment.hide);\r\n    let segmentSlice = 360 / segmentNotHide.length;\r\n    const spinClass = 'is-spinning';\r\n    const selectedClass = 'selected';\r\n    let rotation = 0;\r\n    let prizeNodes;\r\n    function uniqueId() {\r\n        return Math.random().toString(16).slice(2);\r\n    }\r\n    const wheelTabs = () => {\r\n        const tabs = document.querySelectorAll('.side__tab'), tabsBody = document.querySelectorAll('.side__body');\r\n        tabs.forEach((el) => {\r\n            el.addEventListener('click', selectTab);\r\n        });\r\n        wheelResultCounter();\r\n        function selectTab(event) {\r\n            const side = document.querySelector('.side');\r\n            event.preventDefault();\r\n            tabs.forEach(item => {\r\n                item.classList.remove('side__tab_active');\r\n            });\r\n            this.classList.add('side__tab_active');\r\n            selectTabBody(this.dataset.tabName);\r\n            if (this.dataset.tabName === 'tab-results') {\r\n                side.classList.add('side_result');\r\n            }\r\n            else {\r\n                side.classList.remove('side_result');\r\n            }\r\n        }\r\n        function selectTabBody(tabName) {\r\n            tabsBody.forEach(item => {\r\n                item.classList.contains(tabName) ?\r\n                    item.classList.add('side__body_active') :\r\n                    item.classList.remove('side__body_active');\r\n            });\r\n        }\r\n    };\r\n    const wheelHeadIcons = () => {\r\n        console.log(\"start icons\");\r\n        const wheelList = document.querySelector('#wheelList'), wheelShuffle = document.querySelector('#wheelShuffle'), wheelSort = document.querySelector('#wheelSort'), wheelTrash = document.querySelector('#wheelTrash');\r\n        const side = document.querySelector('.side');\r\n        wheelList.addEventListener('click', wheelModal);\r\n        wheelShuffle.addEventListener('click', () => {\r\n            wheelSegments.sort(() => Math.random() - 0.5);\r\n            wheelCreateSegments();\r\n            setupWheel();\r\n        });\r\n        wheelSort.addEventListener('click', (event) => {\r\n            const target = event.target;\r\n            const selectedTabResult = side.classList.contains('side_result');\r\n            function sort() {\r\n                let numbers = wheelSegments.filter((item) => typeof item.text === \"number\");\r\n                let strings = wheelSegments.filter((item) => typeof item.text === \"string\");\r\n                if (target.classList.contains('sorted')) {\r\n                    numbers.sort((a, b) => b.text - a.text);\r\n                    strings.sort((a, b) => a.text > b.text ? -1 : 1);\r\n                    wheelSegments = numbers.concat(strings);\r\n                    target.classList.remove('sorted');\r\n                }\r\n                else {\r\n                    numbers.sort((a, b) => a.text - b.text);\r\n                    strings.sort((a, b) => a.text < b.text ? -1 : 1);\r\n                    wheelSegments = numbers.concat(strings);\r\n                    target.classList.add('sorted');\r\n                }\r\n                wheelCreateSegments();\r\n                setupWheel();\r\n            }\r\n            const resultSort = () => {\r\n                let numbers = wheelResults.filter((item) => typeof item.text === \"number\");\r\n                let strings = wheelResults.filter((item) => typeof item.text === \"string\");\r\n                if (target.classList.contains('sorted')) {\r\n                    numbers.sort((a, b) => b.text - a.text);\r\n                    strings.sort((a, b) => a.text > b.text ? -1 : 1);\r\n                    wheelResults = numbers.concat(strings);\r\n                    target.classList.remove('sorted');\r\n                    console.log(wheelResults);\r\n                }\r\n                else {\r\n                    numbers.sort((a, b) => a.text - b.text);\r\n                    strings.sort((a, b) => a.text < b.text ? -1 : 1);\r\n                    wheelResults = numbers.concat(strings);\r\n                    target.classList.add('sorted');\r\n                    console.log(wheelResults);\r\n                }\r\n                addSelectResult();\r\n            };\r\n            selectedTabResult ? resultSort() : sort();\r\n        });\r\n        wheelTrash.addEventListener('click', () => {\r\n            const selectedTabResult = side.classList.contains('side_result');\r\n            function clearList(elem) {\r\n                elem.length = 0;\r\n            }\r\n            if (selectedTabResult) {\r\n                const bodyResults = document.querySelector('.tab-results');\r\n                clearList(wheelResults);\r\n                bodyResults.innerHTML = 'Пусто';\r\n                wheelResultCounter();\r\n            }\r\n            else {\r\n                clearList(wheelSegments);\r\n                wheelSegmentCounter();\r\n                wheelCreateSegments();\r\n                setupWheel();\r\n            }\r\n        });\r\n    };\r\n    const wheelCreateSegments = () => {\r\n        const wheelEntries = document.querySelector('#wheelEntries');\r\n        const wheelSegmentHtml = (item) => {\r\n            return `\r\n            <div class=\"side__item ${item.hide ? 'side__item_hide' : ''}\">\r\n               <input name=\"${item.id}\" type=\"text\" class=\"side__number\" value=\"${item.amount}\"/>\r\n               <input name=\"${item.id}\" type=\"text\" class=\"side__text\" value=\"${item.text}\"/>\r\n               <div class=\"side__buttons\">\r\n               <button class=\"hide_button\">\r\n                    <i class=\"${!item.hide ? 'fas fa-eye fa-lg' : 'fas fa-eye-slash fa-lg'}\"></i>      \r\n               </button>\r\n               <button class=\"remove_button\">\r\n                               <i class=\"fas fa-times fa-lg\"></i>\r\n               </button>\r\n\r\n               </div>\r\n            </div>\r\n        `;\r\n        };\r\n        const wheelUpdateHtml = () => {\r\n            wheelEntries.innerHTML = '';\r\n            wheelSegments.map((item) => {\r\n                if (!item.copy) {\r\n                    wheelEntries.innerHTML += wheelSegmentHtml(item);\r\n                }\r\n            });\r\n        };\r\n        wheelUpdateHtml();\r\n        wheelSegmentItems = wheelEntries.querySelectorAll('.side__item');\r\n        function editAmount() {\r\n            const segmentAmount = parseInt(this.value);\r\n            if (segmentAmount && segmentAmount > 0 && segmentAmount < 51) {\r\n                wheelSegments.find(segment => segment.id === this.name && !segment.copy).amount = parseInt(this.value);\r\n                wheelSegmentCounter();\r\n                setupWheel();\r\n            }\r\n        }\r\n        function editText() {\r\n            wheelSegments\r\n                .filter(segment => segment.id === this.name)\r\n                .map(segment => segment.text = this.value);\r\n            setupWheel();\r\n        }\r\n        wheelEntries.querySelectorAll('.hide_button')\r\n            .forEach((btn, index) => {\r\n            btn.addEventListener('click', (event) => {\r\n                const target = event.currentTarget;\r\n                const children = target.children[0];\r\n                !children.classList.contains('fa-eye-slash') ?\r\n                    children.className = 'fas fa-eye-slash fa-lg' :\r\n                    children.className = 'fas fa-eye fa-lg';\r\n                const id = wheelSegments[index].id;\r\n                if (IS_AMOUNT) {\r\n                    wheelSegments.map(segment => segment.id === id ? segment.hide = !segment.hide : null);\r\n                }\r\n                else {\r\n                    wheelSegments.map(segment => segment.id === id && !segment.copy ? segment.hide = !segment.hide : null);\r\n                }\r\n                wheelSegmentCounter();\r\n                setupWheel();\r\n                wheelSegments[index].hide ?\r\n                    wheelSegmentItems[index].classList.add('side__item_hide') :\r\n                    wheelSegmentItems[index].classList.remove('side__item_hide');\r\n            });\r\n        });\r\n        wheelEntries.querySelectorAll('.remove_button')\r\n            .forEach((btn, index) => {\r\n            btn.addEventListener('click', () => {\r\n                const id = wheelSegments[index].id;\r\n                wheelSegments = wheelSegments.filter(segment => segment.id !== id);\r\n                wheelSegmentCounter();\r\n                setupWheel();\r\n                wheelCreateSegments();\r\n            });\r\n        });\r\n        wheelEntries.querySelectorAll('.side__number')\r\n            .forEach(item => {\r\n            item.addEventListener('input', editAmount);\r\n        });\r\n        wheelEntries.querySelectorAll('.side__text')\r\n            .forEach(item => {\r\n            item.addEventListener('input', editText);\r\n        });\r\n    };\r\n    const wheelAddSegment = () => {\r\n        const headInput = document.querySelector('#wheelMainInput');\r\n        const headAmount = document.querySelector('#wheelMainAmount');\r\n        const btn = document.querySelector('#wheelAddSegment');\r\n        function addSegment() {\r\n            if (headInput.value) {\r\n                let headInputValue = headInput.value;\r\n                const headAmountValue = parseInt(headAmount.value);\r\n                if (Number(headInputValue)) {\r\n                    headInputValue = Number(headInputValue);\r\n                }\r\n                if (headAmountValue < 51 && headAmountValue > 0) {\r\n                    wheelSegments = [...wheelSegments, {\r\n                            id: uniqueId(),\r\n                            amount: headAmountValue,\r\n                            text: headInputValue,\r\n                            hide: false,\r\n                            copy: false\r\n                        }];\r\n                    headInput.value = '';\r\n                    headAmount.value = \"1\";\r\n                    headInput.focus();\r\n                    wheelCheckAmount();\r\n                    wheelSegmentCounter();\r\n                    wheelCreateSegments();\r\n                    setupWheel();\r\n                }\r\n            }\r\n        }\r\n        function keyUpAdd(event) {\r\n            if (event.key === 'Enter') {\r\n                addSegment();\r\n            }\r\n        }\r\n        btn.addEventListener('click', addSegment);\r\n        headInput.addEventListener('keyup', keyUpAdd);\r\n    };\r\n    const wheelSegmentCounter = () => {\r\n        wheelCheckAmount();\r\n        const wheelShuffle = document.querySelector('#wheelShuffle'), wheelSort = document.querySelector('#wheelSort'), wheelTrash = document.querySelector('#wheelTrash');\r\n        const lockBtn = () => {\r\n            wheelShuffle.disabled = true;\r\n            wheelSort.disabled = true;\r\n            wheelTrash.disabled = true;\r\n        };\r\n        const unlockBtn = () => {\r\n            wheelShuffle.disabled = false;\r\n            wheelSort.disabled = false;\r\n            wheelTrash.disabled = false;\r\n        };\r\n        let counterSegment;\r\n        let counter = document.querySelector('.side__entries_counter');\r\n        if (IS_AMOUNT) {\r\n            counterSegment = wheelSegments.filter(segment => !segment.hide);\r\n        }\r\n        else {\r\n            counterSegment = wheelSegments.filter(segment => !segment.hide && !segment.copy);\r\n        }\r\n        counter.innerHTML = counterSegment.length.toString();\r\n        if (counterSegment.length) {\r\n            counter.style.display = \"flex\";\r\n            unlockBtn();\r\n        }\r\n        else {\r\n            counter.style.display = \"none\";\r\n            lockBtn();\r\n        }\r\n        wheelAddColors();\r\n        wheelCheckCountSegments();\r\n    };\r\n    const wheelCheckCountSegments = () => {\r\n        const xl = \"wheel__list_xl\";\r\n        const lg = \"wheel__list_lg\";\r\n        const md = \"wheel__list_md\";\r\n        const sm = \"wheel__list_sm\";\r\n        const xs = \"wheel__list_xs\";\r\n        const length = wheelSegments.length;\r\n        if (length > 0) {\r\n            if (length <= 12) {\r\n                wheelList.className = `wheel__list ${xl}`;\r\n            }\r\n            if (length > 12) {\r\n                wheelList.className = `wheel__list ${lg}`;\r\n            }\r\n            if (length > 24) {\r\n                wheelList.className = `wheel__list ${md}`;\r\n            }\r\n            if (length > 32) {\r\n                wheelList.className = `wheel__list ${sm}`;\r\n            }\r\n            if (length > 40) {\r\n                wheelList.className = `wheel__list ${xs}`;\r\n            }\r\n        }\r\n    };\r\n    const wheelCheckAmount = () => {\r\n        let arr = wheelSegments.filter(segment => !segment.copy);\r\n        arr.filter(segment => (segment.amount > 1 && !segment.copy));\r\n        arr.map(segment => {\r\n            let amount = segment.amount;\r\n            while (amount !== 1) {\r\n                arr.push(Object.assign(Object.assign({}, segment), { copy: true, amount: 1 }));\r\n                --amount;\r\n            }\r\n        });\r\n        wheelSegments = arr;\r\n    };\r\n    const setupSide = (isAmounts) => {\r\n        const side = document.querySelector(\".side\");\r\n        if (isAmounts) {\r\n            side.classList.remove(\"side_amount-off\");\r\n            wheelSegments.filter(segment => !segment.copy);\r\n        }\r\n        else {\r\n            side.classList.add(\"side_amount-off\");\r\n            console.log(wheelSegments);\r\n        }\r\n        setupWheel();\r\n        wheelSegmentCounter();\r\n    };\r\n    const wheelResultCounter = () => {\r\n        let resultsCounter = document.querySelector('.side__counter');\r\n        resultsCounter.innerHTML = wheelResults.length.toString();\r\n        if (wheelResults.length) {\r\n            resultsCounter.style.display = \"flex\";\r\n        }\r\n        else {\r\n            resultsCounter.style.display = \"none\";\r\n        }\r\n    };\r\n    const addSelectResult = (result) => {\r\n        const body = document.querySelector('.tab-results');\r\n        let check = true;\r\n        const resultHtml = (item) => {\r\n            if (item.inc) {\r\n                return `<div class=\"side__item\">\r\n                            <div class=\"side__text\">\r\n                                ${item.text}\r\n                                <span id=\"wheelResult_${item.id}\" class=\"side__inc\">\r\n                                    + ${item.value}\r\n                                </span>\r\n                            </div>\r\n                         </div>\r\n        `;\r\n            }\r\n            return `<div class=\"side__item\">\r\n                            <div class=\"side__text\">\r\n                                ${item.text}\r\n                            </div>\r\n                         </div>\r\n        `;\r\n        };\r\n        const resultUpdateHtml = () => {\r\n            body.innerHTML = '';\r\n            if (wheelResults.length) {\r\n                wheelResults.map((item) => {\r\n                    body.innerHTML += resultHtml(item);\r\n                });\r\n            }\r\n            else if (wheelResults.length === 0) {\r\n                body.innerHTML = 'Пусто';\r\n            }\r\n        };\r\n        if (result) {\r\n            if (wheelResults.length) {\r\n                wheelResults.map(item => {\r\n                    if ((item.id === (result === null || result === void 0 ? void 0 : result.id)) && (item.inc && result.inc)) {\r\n                        item.value++;\r\n                        check = false;\r\n                    }\r\n                });\r\n                if (check) {\r\n                    wheelResults = [...wheelResults, result];\r\n                }\r\n            }\r\n            else {\r\n                wheelResults = [...wheelResults, result];\r\n            }\r\n        }\r\n        wheelResultCounter();\r\n        resultUpdateHtml();\r\n    };\r\n    const wheelDisabledBtn = (btn) => {\r\n        btn.disabled ? btn.disabled = false : btn.disabled = true;\r\n    };\r\n    const modalOpen = (modal) => {\r\n        if (modal) {\r\n            const modalActive = document.querySelector('.wheel-modal_open');\r\n            modalActive ? modalClose(modalActive) : null;\r\n            modal.classList.add('wheel-modal_open');\r\n        }\r\n    };\r\n    const modalClose = (modal) => {\r\n        let modalInputReadonly = document.querySelector('.wheel-modal__input-readonly');\r\n        if (modalInputReadonly) {\r\n            modalInputReadonly.remove();\r\n        }\r\n        modal.classList.remove('wheel-modal_open');\r\n    };\r\n    const wheelModal = () => {\r\n        const modal = document.querySelector('#wheelModal');\r\n        const modalCloseButton = document.querySelectorAll('.wheel-modal_close');\r\n        const modalAddBtn = document.querySelector('.wheel-modal__button_add');\r\n        let modalInput = document.querySelector('.wheel-modal__input');\r\n        let modalInputEdit = document.querySelector('.wheel-modal__input-editable');\r\n        let modalInputReadonly = document.querySelector('.wheel-modal__input-readonly');\r\n        let arr = [...wheelSegments];\r\n        modalOpen(modal);\r\n        if (wheelSegments.length > 0) {\r\n            if (modalInputReadonly === null) {\r\n                const div = document.createElement('div');\r\n                div.className = 'wheel-modal__input-readonly';\r\n                div.innerHTML = '';\r\n                wheelSegments.map(item => {\r\n                    div.innerHTML += wheelCreateHTML(item);\r\n                });\r\n                modalInput.insertBefore(div, modalInputEdit);\r\n                const inputs = div.querySelectorAll('.wheel-modal__input_item');\r\n                function newTextSegment(segment, input) {\r\n                    segment.text = input.value;\r\n                    modalAddBtn.removeEventListener('click', newTextSegment.bind);\r\n                }\r\n                inputs.forEach(input => {\r\n                    arr.map(segment => {\r\n                        if (segment.id === input.id) {\r\n                            input.addEventListener('input', newTextSegment.bind(null, segment, input));\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        if (modalCloseButton.length > 0) {\r\n            modalCloseButton.forEach(btn => {\r\n                btn.addEventListener('click', () => modalClose(modal));\r\n            });\r\n        }\r\n        function wheelCreateHTML(item) {\r\n            return `\r\n            <input class=\"wheel-modal__input_item\" id=\"${item.id}\" type=\"text\" value=\"${item.text}\"/> \r\n        `;\r\n        }\r\n        function addElements() {\r\n            modalInputEdit.childNodes.forEach(item => {\r\n                if (item.textContent) {\r\n                    if (parseInt(item.textContent)) {\r\n                        const number = parseInt(item.textContent);\r\n                        wheelSegments = [...wheelSegments, {\r\n                                id: uniqueId(),\r\n                                amount: 1,\r\n                                text: number,\r\n                                hide: false,\r\n                                copy: false\r\n                            }];\r\n                    }\r\n                    else {\r\n                        const string = item.textContent;\r\n                        wheelSegments = [...wheelSegments, {\r\n                                id: uniqueId(),\r\n                                amount: 1,\r\n                                text: string,\r\n                                hide: false,\r\n                                copy: false\r\n                            }];\r\n                    }\r\n                }\r\n            });\r\n            modalInputEdit.innerHTML = \"\";\r\n            wheelCreateSegments();\r\n            setupWheel();\r\n            modalAddBtn.removeEventListener('click', addElements);\r\n        }\r\n        modalAddBtn.addEventListener('click', addElements);\r\n    };\r\n    const winModal = (win, selected, winText) => {\r\n        const modal = document.querySelector('#wheelModalWin'), modalCloseButton = document.querySelectorAll('.wheel-modal_close'), text = modal.querySelector('.wheel-modal__title'), btnAdd = modal.querySelector('.wheel-modal__button_ok'), btnRemove = modal.querySelector('.wheel-modal__button_remove'), btnHide = modal.querySelector('.wheel-modal__button_hide'), btnInc = modal.querySelector('.wheel-modal__button_inc');\r\n        modalOpen(modal);\r\n        text.innerHTML = String(winText);\r\n        if (modalCloseButton.length > 0) {\r\n            modalCloseButton.forEach(btn => {\r\n                btn.addEventListener('click', () => {\r\n                    modalClose(modal);\r\n                });\r\n            });\r\n        }\r\n        function addHandler() {\r\n            const result = {\r\n                id: win.id,\r\n                text: winText,\r\n                value: 1,\r\n                inc: false\r\n            };\r\n            addSelectResult(result);\r\n            removeListener();\r\n        }\r\n        function hideHandler() {\r\n            const result = {\r\n                id: win.id,\r\n                text: winText,\r\n                value: 1,\r\n                inc: false\r\n            };\r\n            addSelectResult(result);\r\n            wheelSegments.filter(segment => segment.id === win.id).map(segment => segment.hide = true);\r\n            wheelCreateSegments();\r\n            setupWheel();\r\n            removeListener();\r\n        }\r\n        function removeHandler() {\r\n            const result = {\r\n                id: win.id,\r\n                text: winText,\r\n                value: 1,\r\n                inc: false\r\n            };\r\n            addSelectResult(result);\r\n            wheelSegments = wheelSegments.filter(segment => !(segment.id === win.id));\r\n            wheelCreateSegments();\r\n            setupWheel();\r\n            removeListener();\r\n        }\r\n        function incHandler() {\r\n            const result = {\r\n                id: win.id,\r\n                text: winText,\r\n                value: 1,\r\n                inc: true\r\n            };\r\n            addSelectResult(result);\r\n            removeListener();\r\n        }\r\n        function removeListener() {\r\n            btnAdd.removeEventListener('click', addHandler);\r\n            btnRemove.removeEventListener('click', removeHandler);\r\n            btnHide.removeEventListener('click', hideHandler);\r\n            btnInc.removeEventListener('click', incHandler);\r\n        }\r\n        btnAdd.addEventListener('click', addHandler);\r\n        btnRemove.addEventListener('click', removeHandler);\r\n        btnHide.addEventListener('click', hideHandler);\r\n        btnInc.addEventListener('click', incHandler);\r\n    };\r\n    const wheelCreateSegmentsNodes = () => {\r\n        const segmentOffset = Math.floor(180 / segmentNotHide.length);\r\n        wheelList.innerHTML = '';\r\n        segmentNotHide.forEach((segment, index) => {\r\n            const rotation = ((segmentSlice * index) * -1) - segmentOffset;\r\n            if (!segment.hide) {\r\n                wheelList.insertAdjacentHTML(\"beforeend\", `<li class=\"wheel__item\" style=\"--rotate: ${rotation}deg\">\r\n                        <span class=\"wheel__item_text\">${segment.text}</span>\r\n                     </li>\r\n                    `);\r\n            }\r\n        });\r\n    };\r\n    const wheelAddColors = () => {\r\n        if (wheelSegments.length) {\r\n            if (wheelSegments.length > colors.length) {\r\n                let length = wheelSegments.length;\r\n                while (length >= colors.length) {\r\n                    colors.push(...curColors);\r\n                    --length;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const wheelCreateSegmentsColor = () => {\r\n        wheelList.setAttribute(\"style\", `background: repeating-conic-gradient(\r\n      from -90deg,\r\n      ${colors.map((color, i) => {\r\n            return `${color} 0 ${(100 / segmentNotHide.length) * (segmentNotHide.length - i)}%`;\r\n        }).reverse()}\r\n    );`);\r\n    };\r\n    const spinertia = (min, max) => {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    };\r\n    const selectSegment = () => {\r\n        let curSegment = rotation + 270;\r\n        curSegment > 360 ? curSegment %= 360 : null;\r\n        const selected = Math.floor(curSegment / segmentSlice);\r\n        let text = prizeNodes[selected].textContent.replace(/\\s+/g, ' ').trim();\r\n        if (parseInt(text)) {\r\n            text = parseInt(text);\r\n        }\r\n        prizeNodes[selected].classList.add(selectedClass);\r\n        winModal(notHide[selected], selected, text);\r\n    };\r\n    const setupWheel = () => {\r\n        notHide = wheelSegments.filter(segment => !segment.hide);\r\n        if (!notHide.length) {\r\n            segmentNotHide = plug.filter(segment => !segment.hide);\r\n            segmentSlice = 360 / segmentNotHide.length;\r\n        }\r\n        else {\r\n            if (!IS_AMOUNT) {\r\n                segmentNotHide = wheelSegments.filter(segment => !segment.hide && !segment.copy);\r\n                segmentSlice = 360 / segmentNotHide.length;\r\n            }\r\n            else {\r\n                segmentNotHide = wheelSegments.filter(segment => !segment.hide);\r\n                segmentSlice = 360 / segmentNotHide.length;\r\n            }\r\n        }\r\n        wheelCreateSegmentsColor();\r\n        wheelCreateSegmentsNodes();\r\n        prizeNodes = wheel.querySelectorAll('.wheel__item');\r\n    };\r\n    trigger.addEventListener('click', () => {\r\n        const side = document.querySelector('.side');\r\n        const inputs = side.querySelectorAll('input');\r\n        const buttons = side.querySelectorAll('button');\r\n        inputs.forEach(input => {\r\n            input.readOnly = true;\r\n        });\r\n        buttons.forEach(btn => {\r\n            wheelDisabledBtn(btn);\r\n        });\r\n        wheelDisabledBtn(trigger);\r\n        rotation = Math.floor(Math.random() * 360 + spinertia(2000, 5000));\r\n        prizeNodes.forEach(win => win.classList.remove(selectedClass));\r\n        wheel.classList.add(spinClass);\r\n        wheelList.style.setProperty(\"--rotate\", rotation.toString());\r\n    });\r\n    wheelList.addEventListener('transitionend', () => {\r\n        const side = document.querySelector('.side');\r\n        const inputs = side.querySelectorAll('input');\r\n        const buttons = side.querySelectorAll('button');\r\n        rotation %= 360;\r\n        selectSegment();\r\n        wheel.classList.remove(spinClass);\r\n        wheelList.style.setProperty(\"--rotate\", rotation.toString());\r\n        wheelDisabledBtn(trigger);\r\n        inputs.forEach(input => {\r\n            input.readOnly = false;\r\n        });\r\n        buttons.forEach(btn => {\r\n            wheelDisabledBtn(btn);\r\n        });\r\n    });\r\n    wheelCheckboxAmount.addEventListener('click', () => {\r\n        IS_AMOUNT = !IS_AMOUNT;\r\n        setupSide(IS_AMOUNT);\r\n    });\r\n    setupSide(IS_AMOUNT);\r\n    wheelCreateSegments();\r\n    wheelTabs();\r\n    wheelHeadIcons();\r\n    wheelAddSegment();\r\n};\r\nappWheel();\r\n//# sourceMappingURL=script.js.map\n\n//# sourceURL=webpack://evroballon/./src/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/script.js"]();
/******/ 	
/******/ })()
;